# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = 'centos/7'
  config.berkshelf.enabled = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.define 'services01' do |services01|

    services01.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box"
    services01.vm.box = "liferaybox"

    services01.vm.hostname = 'services01'
    services01.vm.network 'private_network', ip: '192.168.50.4'

    services01.vm.provider 'virtualbox' do |vb|
      vb.memory = '1024'
      vb.cpus = 1
    end

    services01.vm.provision :chef_solo do |chef|
      chef.roles_path = './chef/roles'
      chef.data_bags_path = './chef/data_bags'
      chef.run_list = [
        'role[myloadbalancervagrant]',
        'role[nfs_server]',
        'recipe[sourcesense_nfs]',
        'recipe[sourcesense_mysql]'
      ]
    end
  end

  config.vm.define 'liferaynode01' do |liferaynode01|

    liferaynode01.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box"
    liferaynode01.vm.box = "liferaybox"

    liferaynode01.vm.hostname = 'liferaynode01'
    liferaynode01.vm.network 'private_network', ip: '192.168.50.5'

    liferaynode01.vm.provider 'virtualbox' do |vb|
      vb.memory = '1024'
      vb.cpus = 1
    end

    liferaynode01.vm.provision :chef_solo do |chef|
      chef.roles_path = './chef/roles'
      chef.data_bags_path = './chef/data_bags'
      chef.run_list = [
        'role[java]',
        'recipe[sourcesense_liferay]'
      ]
    end
  end

  config.vm.define 'liferaynode02' do |liferaynode02|

    liferaynode02.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box"
    liferaynode02.vm.box = "liferaybox"

    liferaynode02.vm.hostname = 'liferaynode02'
    liferaynode02.vm.network 'private_network', ip: '192.168.50.6'

    liferaynode02.vm.provider 'virtualbox' do |vb|
      vb.memory = '1024'
      vb.cpus = 1
    end

    liferaynode02.vm.provision :chef_solo do |chef|
      chef.roles_path = './chef/roles'
      chef.data_bags_path = './chef/data_bags'
      chef.run_list = [
        'role[java]',
        'recipe[sourcesense_liferay]'
      ]
    end
  end
end
